/// <reference types="node" />
import { LocationInfo } from '../models/DiscoveryService/LocationInfo';
import { EventStoreSettings } from '../models/DiscoveryService/EventStoreSettings';
import { MongoDbSettings } from '../models/DiscoveryService/MongoDbSettings';
import { RabbitMqSettings } from '../models/DiscoveryService/RabbitMqSettings';
import { HectorDbSettings } from '../models/DiscoveryService/HectorDbSettings';
import { BraintreeSettings } from '../models/DiscoveryService/BraintreeSettings';
import { ServiceType } from '../models/DiscoveryService/ServiceTypeEnum';
import { ILegacyAppsiteBackend } from '../interfaces/ILegacyAppsiteBackend';
import { ITemplateDesigner } from '../interfaces/ITemplateDesigner';
import { CloudServicesSettings } from '../models/DiscoveryService/CloudServicesSettings';
import { IDiscoveryService } from '../interfaces/IDiscoveryservice';
import { ICustomerService } from '../interfaces/ICustomerservice';
import { IEmployeesService } from '../interfaces/IEmployeesservice';
import { IMembershipService } from '../interfaces/IMembershipservice';
import { ITwoFactorAuthenticationService } from '../interfaces/ITwoFactorAuthenticationservice';
import { IPushNotificationService } from '../interfaces/IPushNotificationservice';
import { IRatingService } from '../interfaces/IRatingservice';
import { IAccountingService } from '../interfaces/IAccountingservice';
import { ICheckinOutService } from '../interfaces/ICheckinOutservice';
import { IArticlesService } from '../interfaces/IArticlesservice';
import { IMailingService } from '../interfaces/IMailingservice';
import { ISMSService } from '../interfaces/ISMSservice';
import { ICourseManagementService } from '../interfaces/ICourseManagamentservice';
export declare class DiscoveryService implements IDiscoveryService {
    baseUrl: string;
    host: string;
    port: number;
    timer: NodeJS.Timer;
    private customerService;
    private employeesService;
    private membershipService;
    private twoFactorAuthenticationService;
    private pushNotificationService;
    private ratingService;
    private legacyAppsiteBackend;
    private accountingService;
    private checkinOutService;
    private articlesService;
    private mailingService;
    private smsService;
    private templateDesigner;
    private courseManagementService;
    constructor(host: string, port: number);
    startSelfRegistration(serviceName: string, serviceVersion: string, servicePort: number | string, proxyRoute: string, isPublic: boolean, serviceType: ServiceType): Promise<void>;
    getLocationInfo(): Promise<LocationInfo>;
    getEnvironment(): Promise<any>;
    getEventStoreSettings(): Promise<EventStoreSettings>;
    getMongoDbSettings(): Promise<MongoDbSettings>;
    getRabbitMqSettings(): Promise<RabbitMqSettings>;
    getHectorDbSettings(): Promise<HectorDbSettings>;
    getBraintreeSettings(): Promise<BraintreeSettings>;
    getCloudServicesSettings(): Promise<CloudServicesSettings>;
    getClubs(): Promise<any>;
    getTitles(): Promise<any>;
    getContactCategories(): Promise<any>;
    getMailingService(): Promise<IMailingService>;
    getSMSService(): Promise<ISMSService>;
    getCustomerService(): Promise<ICustomerService>;
    getEmployeesService(): Promise<IEmployeesService>;
    getMembershipService(): Promise<IMembershipService>;
    getTwoFactorAuthenticationService(): Promise<ITwoFactorAuthenticationService>;
    getPushNotificationService(): Promise<IPushNotificationService>;
    getRatingService(): Promise<IRatingService>;
    getLegacyAppsiteBackend(): Promise<ILegacyAppsiteBackend>;
    getAccountingService(): Promise<IAccountingService>;
    getCheckinOutService(): Promise<ICheckinOutService>;
    getArticlesService(): Promise<IArticlesService>;
    getTemplateDesigner(): Promise<ITemplateDesigner>;
    getCourseManagementService(): Promise<ICourseManagementService>;
    private registerService(serviceName, serviceVersion, servicePort, proxyRoute, isPublic, serviceType);
}
